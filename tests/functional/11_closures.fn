var returnClosure;

// 'Open upvalue': refers to an upvalue that points
// to a local variable still on the stack.
fun printClosure() {
	var x = false;
	var z = "printClosure()";

	fun inner() {
		println(z);
	}
	inner();
}

// 'Closed upvalue': refers to a variable which is moved
// to the heap.
fun get() {
	var x = "returnClosure()";
		fun inner() {
		println(x);
	}

	return inner;
}
returnClosure = get();

printClosure();
// Prints 'false' while 'returnClosure()' is expected.
returnClosure();

var globalSet;
var globalGet;

// Sharing a variable.
fun main() {
	// A variable to be shared
	var a = "initial";

	// Sets new value.
	fun set() {
		a = "updated";
	}

	// Shall print updated value.
	fun get() {
		println(a);
	}

	globalSet = set;
	globalGet = get;
}

main();
globalSet();
globalGet();


var globalOne;
var globalTwo;
fun main2()
{
	{
		var a = "one";
		fun one() {
			println(a);
		}
		globalOne = one;
	}

	{
		var a = "two";
		fun two() {
			println(a);
		}
		globalTwo = two;
	}
}

main2();
globalOne();
globalTwo();

var loopOne;
var loopTwo;

fun main3()
{
	for (var a = 1; a <= 2; a = a + 1) {
		fun closure() {
			println(a);
		}

		if (loopOne == nil) {
			println("loopOne is NULL.");
			loopOne = closure;
		} else {
			println("loopOne is not NULL.");
			loopTwo = closure;
		}
	}
}

main3();
loopOne();
loopTwo();